1 Install ubuntu 14.04 virtual machine on vmware
uname -a
-------------------------------------
Linux ubuntu 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
lsb_release -a
-------------------------------------
Distributor ID: Ubuntu
Description:    Ubuntu 14.04 LTS
Release:        14.04
Codename:       trusty

2 Install ssh server on ubuntu for putty
sudo apt-get install openssh-server

3 Use ubuntu mirrors of 163
wget http://mirrors.163.com/.help/sources.list.trusty 
[ http://mirrors.163.com/.help/ubuntu.html ]
mv /etc/apt/sources.list /etc/apt/sources.list.bk
mv $(pwd)/sources.list.trusty /etc/apt/sources.list
sudo apt-get update

4 Get the .deb installation package
wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/stable/amd64/docker-ce_18.03.0~ce-0~ubuntu_amd64.deb
[https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-from-a-package]
sudo apt-get install libltdl7 libsystemd-journal0 (dependency package for docker-ce)
sudo dpkg -i $(pwd)/docker-ce_18.03.0~ce-0~ubuntu_amd64.deb
docker version
-------------------------------------------------
Client:
 Version:       18.03.0-ce
 API version:   1.37
 Go version:    go1.9.4
 Git commit:    0520e24
 Built: Wed Mar 21 23:10:22 2018
 OS/Arch:       linux/amd64
 Experimental:  false
 Orchestrator:  swarm

Server:
 Engine:
  Version:      18.03.0-ce
  API version:  1.37 (minimum version 1.12)
  Go version:   go1.9.4
  Git commit:   0520e24
  Built:        Wed Mar 21 23:08:52 2018
  OS/Arch:      linux/amd64
  Experimental: false

5 Test docker-ce
docker pull hello-world
docker run hello-world
-----------------------------------------
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/

6 Pull official image for building private docker registry
docker pull registry

7 Make .crt and .key for authentication with openssl
openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/local.registry.docker.com.key -x509 -days 365 
-out certs/local.registry.docker.com.crt
--------------------------------
Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Shanghai
Locality Name (eg, city) []:Shanghai
Organization Name (eg, company) [Internet Widgits Pty Ltd]:kedacom
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:local.registry.docker.com
Email Address []:daihongjun@kedacom.com
----------------------------------------------
#create user for private registry with username 'admin' and password 'admin'
docker run --entrypoint htpasswd registry -Bbn admin admin > auth/htpasswd

8 Run private docker registry
docker run -dit -p 5000:5000 --restart=always --name hub 
-v $(pwd)/auth:/auth
-e "REGISTRY_AUTH=htpasswd" 
-e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"
-e "REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd" 
-v $(pwd)/certs:/certs 
-e "REGISTRY_HTTP_TLS_CERTIFICATE=/certs/local.registry.docker.com.crt"
-e "REGISTRY_HTTP_TLS_KEY=/certs/local.registry.docker.com.key" 
registry
---------------------------------------
option explanation
-d：daemonize background
-p：port mapping
--restart=always: automatically restart when container startup
--name registry：container name
-v: hostdir:cdir[:rw|ro], directory mapping
-v $(pwd)/auth:/auth :  password dir mapping
-v $(pwd)/certs:/certs：ssl certification dir mapping

-e:set environment parameter
-e REGISTRY_AUTH：验证方式
-e REGISTRY_AUTH_HTPASSWD_REALM：验证域名
-e REGISTRY_AUTH_HTPASSWD_PATH：密码文件路径
-e REGISTRY_HTTP_TLS_CERTIFICATE：ssl证书文件路径
-e REGISTRY_HTTP_TLS_KEY：ssl证书文件路径
registry: image name
[ http://www.cnblogs.com/calvinK/p/7060066.html ]

9 VMWare NAT setting for accessing ubuntu virtual machine
编辑(E)->虚拟网络编辑器(N)...->选中NAT模式 更改设置(C)->选中NAT模式 NAT设置(S)...
->添加(A)...：输入主机端口、虚拟机IP、虚拟机端口后确定
--------------------------------------
Browse for availability testing of registry
  https://172.16.66.94:5000/v2/_catalog
Following returned after username and password entered
  "{"repositories":[]}"
Indicates no images exists in private registry.

10 Push image to private docker registry
Open PowerShell on Windows 10
docker login 172.16.66.94:5000
----------------------
Username: admin
Password: admin
Login Succeeded
----------------------
docker tag hello-world 172.16.66.94:5000/win/hello-world
docker push 172.16.66.94:5000/win/hello-world
----------------------
Browse the content of registry
  https://172.16.66.94:5000/v2/_catalog
Following returned
  "{"repositories":["win/hello-world"]}"

[ https://docs.docker.com/engine/reference/commandline ]

11 Test image pull from private docker registry
docker pull 172.16.66.94:5000/win/hello-world
docker run 172.16.66.94:5000/win/hello-world
-------------------------------------
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (windows-amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run a Windows Server container with:
 PS C:\> docker run -it microsoft/windowsservercore powershell

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
